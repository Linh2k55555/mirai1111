const p = require("path");
const fs = require("fs");
const moment = require('moment-timezone');

moment.locale('vi');

const cacheDir = p.join(__dirname, 'cache', 'checktts');

if (!fs.existsSync(cacheDir)) {
    fs.mkdirSync(cacheDir, { recursive: true });
}
const fileNoti = cacheDir + '/notiData.json'
if (!fs.existsSync(fileNoti)) {
    fs.writeFileSync(fileNoti, JSON.stringify([]));
}
let resets = false;

const createNewFile = (filePath, event) => {
    const New_File = {
        Time: moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss || YYYY-MM-DD'),
        total: [],
        week: [],
        day: []
    };

    if (event.isGroup) {
        const listID = event.participantIDs;
        for (let userID of listID) {
            const userTemplate = {
                id: userID,
                count: 0,
                ttgn: moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss || dddd'),
                joinTime: moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss || YYYY-MM-DD')
            };
            New_File.total.push(userTemplate);
            New_File.week.push(userTemplate);
            New_File.day.push(userTemplate);
        }
    }

    fs.writeFileSync(filePath, JSON.stringify(New_File, null, 4));
    return New_File;
};


const join_time = (joinTime) => {
    const [t, dp] = joinTime.split(' || ');
    const j = moment.tz(`${dp}T${t}`, 'YYYY-MM-DDTHH:mm:ss', 'Asia/Ho_Chi_Minh');
    const now = moment.tz('Asia/Ho_Chi_Minh');
    const dt = moment.duration(now.diff(j));
    const d = dt.asDays();
    const h = dt.hours();
    const m = dt.minutes();
    const s = dt.seconds();

    if (d >= 1) {
        return `${Math.floor(d)} ng√†y`;
    } else {
        return `${h}|${m}|${s}`;
    }
};
module.exports = {
    config: {
        name: "checktt",
        version: "3.0.0",
        credits: "Niio-team (Vtuan)",
        Rent: 1,
        hasPermssion: 0,
        description: "no",
        usage: "no",
        commandCategory: "Nh√≥m",
        cooldowns: 0
    },
    handleEvent: async function ({ api, event, Threads }) {
        if (resets) return;
        if (!event.isGroup) return;

        const { senderID, threadID } = event;
        const filePath = p.join(cacheDir, `${threadID}.json`);

        let threadData;
        if (!fs.existsSync(filePath)) {
            threadData = createNewFile(filePath, event);
        } else {
            try {
                const rawData = fs.readFileSync(filePath);
                threadData = JSON.parse(rawData);
            } catch (error) {
                threadData = createNewFile(filePath, event);
            }

            if (event.isGroup) {
                for (let userID of event.participantIDs) {
                    if (!threadData.total.some(user => user.id == userID)) {
                        const userTemplate = {
                            id: userID,
                            count: 0,
                            ttgn: moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss || dddd'),
                            joinTime: moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss || YYYY-MM-DD')
                        };
                        threadData.total.push(userTemplate);
                        threadData.week.push(userTemplate);
                        threadData.day.push(userTemplate);
                    }
                }
                fs.writeFileSync(filePath, JSON.stringify(threadData, null, 4));
            }
        }

        const updateData = (dataArray, senderID) => {
            const userDataIndex = dataArray.findIndex(e => e.id == senderID);

            if (userDataIndex === -1) {
                dataArray.push({
                    id: senderID,
                    count: 1,
                    ttgn: moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss || dddd'),
                    joinTime: moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss || YYYY-MM-DD')
                });
            } else {
                dataArray[userDataIndex].count++;
                dataArray[userDataIndex].ttgn = moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss || dddd');
            }
        };

        updateData(threadData.total, senderID);
        updateData(threadData.week, senderID);
        updateData(threadData.day, senderID);

        fs.writeFileSync(filePath, JSON.stringify(threadData, null, 4));
    },
    run: async function ({ api, event, Threads, args, Users }) {
        const { messageReply, mentions, threadID, messageID, senderID } = event;
        const filePath = p.join(cacheDir, `${threadID}.json`);
        const threadData = JSON.parse(fs.readFileSync(filePath));

        function quickSort(arr, key) {
            if (arr.length <= 1) return arr;
            const pivot = arr[Math.floor(arr.length / 2)][key];
            const left = arr.filter(item => item[key] > pivot);
            const middle = arr.filter(item => item[key] === pivot);
            const right = arr.filter(item => item[key] < pivot);
            return [...quickSort(left, key), ...middle, ...quickSort(right, key)];
        }

        const checkTypes = {
            all: 'total',
            day: 'day',
            week: 'week'
        };

        const type = checkTypes[args[0]];

        if (type) {
            const datas = threadData[type].filter(user => event.participantIDs.includes(user.id));
            const sortedData = await quickSort(datas, 'count');

            let message = `== [ CHECKTT ${args[0].toUpperCase()} ] ==`;
            for (const [index, user] of sortedData.entries()) {
                const userInfo = await Users.getData(user.id);

                let userName = userInfo.name;
                if (!userName) {
                    const userInfoApi = await api.getUserInfo(user.id);
                    userName = userInfoApi[user.id]?.name || "Unknown";
                }
                message += `\n${index + 1}. ${userName}: ${user.count}`;
            }

            if (type !== 'day') {
                message += `\n\n‚ö†Ô∏è Reply tin nh·∫Øn n√†y k√®m\nüìå L·ªçc + s·ªë tin nh·∫Øn: bot s·∫Ω l·ªçc nh·ªØng ng∆∞·ªùi c√≥ s·ªë tin nh·∫Øn t·ª´ s·ªë tin nh·∫Øn m√† ng∆∞·ªùi d√πng nh·∫≠p v√†o` +
                    `\nüìõ Kick + stt (c√≥ th·ªÉ nh·∫≠p nhi·ªÅu, c√°ch nhau b·∫±ng d·∫•u c√°ch): bot s·∫Ω kick ng∆∞·ªùi ƒë√≥ kh·ªèi nh√≥m` +
                    `\nüìé Tag: ƒë·ªÉ tag nh·ªØng th√†nh vi√™n kh√¥ng t∆∞∆°ng t√°c trong ng√†y l√™n(tin nh·∫Øn = 0)!` +
                    `\nüîÑ Reset: ƒë·ªÉ reset tin nh·∫Øn v·ªÅ 0` +
                    `\n\n‚è±Ô∏è G·ª° t·ª± ƒë·ªông sau 60s`;
            }

            const c = type !== 'day' ? (err, info) => {
                if (err) return console.error(err);
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    author: senderID,
                    messageID: info.messageID,
                    threadID: threadID,
                    sortedData
                });
                setTimeout(() => { api.unsendMessage(info.messageID); }, 60000);
            } : null;

            api.sendMessage(message, threadID, c);

            threadData[type] = datas;
            fs.writeFileSync(filePath, JSON.stringify(threadData, null, 4));
        } else if (args[0] === 'reset') {
            const dataThread = (await Threads.getData(event.threadID)).threadInfo;
            if (!dataThread.adminIDs.some(item => item.id === senderID)) {
                return api.sendMessage('‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß quy·ªÅn h·∫°n ƒë·ªÉ s·ª≠ d·ª•ng!', threadID, messageID);
            }

            resets = true;
            try {
                const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
                const participantIDs = event.participantIDs;

                const resetCount = (items) => {
                    return items.filter(item => participantIDs.includes(item.id)).map(item => {
                        item.count = 0;
                        return item;
                    });
                };

                data.total = resetCount(data.total);
                data.week = resetCount(data.week);
                data.day = resetCount(data.day);

                fs.writeFileSync(filePath, JSON.stringify(data, null, 2));

                api.sendMessage(`‚úÖ ƒê√£ ƒë·∫∑t l·∫°i to√†n b·ªô d·ªØ li·ªáu ƒë·∫øm t∆∞∆°ng t√°c c·ªßa nh√≥m`, threadID);
            } catch (error) {
                api.sendMessage(`‚ùé L·ªói: Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i d·ªØ li·ªáu. ${error.message}`, threadID);
            }
            resets = false;
        } else if (args[0] == 'name') {
            const threadInfo = await Threads.getInfo(threadID);
            const participants = threadInfo.participantIDs.filter(userID => !threadInfo.nicknames[userID])
                .map((userID, index) => ({ id: userID, index }));

            if (participants.length === 0) {
                return api.sendMessage("T·∫•t c·∫£ c√°c th√†nh vi√™n ƒë·ªÅu ƒë√£ c√≥ bi·ªát danh.", threadID, messageID);
            }
            let message = "üìã Danh s√°ch c√°c th√†nh vi√™n ch∆∞a c√≥ bi·ªát danh:\n";
            for (let i = 0; i < participants.length; i++) {
                const userID = participants[i].id;
                const userInfo = await Users.getData(userID);
                message += `${i + 1}. ${userInfo.name || 'Kh√¥ng x√°c ƒë·ªãnh'}\n`;
            }
            return api.sendMessage(message, threadID);
        } else if (args[0] == 'l·ªçc') {
            const dataThread = (await Threads.getData(event.threadID)).threadInfo;
            if (!dataThread.adminIDs.some(item => item.id === senderID)) {
                return api.sendMessage('B·∫°n kh√¥ng ƒë·ªß quy·ªÅn h·∫°n ƒë·ªÉ s·ª≠ d·ª•ng!', threadID, messageID);
            }
            const botID = api.getCurrentUserID();
            const botIsAdmin = dataThread.adminIDs.some(admin => admin.id === botID);

            if (!botIsAdmin) {
                return api.sendMessage("‚ö†Ô∏è Bot c·∫ßn quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.", threadID, messageID);
            }

            const sl = parseInt(args[1]);
            if (isNaN(sl)) {
                return api.sendMessage("Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.", threadID, messageID);
            }

            const userss = threadData.total.filter(user => user.count <= sl).map(user => user.id);

            if (userss.length === 0) {
                return api.sendMessage("‚ùé Kh√¥ng c√≥ th√†nh vi√™n n√†o c√≥ s·ªë tin nh·∫Øn nh·ªè h∆°n ho·∫∑c b·∫±ng " + sl, threadID, messageID);
            }
            const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
            for (const id of userss) {
                await api.removeUserFromGroup(id, threadID);
                await delay(500);
            }

            api.sendMessage(`‚úÖ ƒê√£ l·ªçc th√†nh c√¥ng ${userss.length}`, threadID);
        } else if (args[0] == 'die') {

            const dataThread = (await Threads.getData(event.threadID)).threadInfo;
            if (!dataThread.adminIDs.some(item => item.id === senderID)) return api.sendMessage('Quy·ªÅn h·∫°n????', threadID, messageID);

            var { userInfo, adminIDs } = await api.getThreadInfo(event.threadID);
            var arr = [];

            for (const e of userInfo) {
                if (!e.gender) {
                    arr.push(e.id);
                }
            };

            adminIDs = adminIDs.map(e => e.id).some(e => e == api.getCurrentUserID());
            if (arr.length == 0) {
                return api.sendMessage("Trong nh√≥m b·∫°n kh√¥ng t·ªìn t·∫°i 'Ng∆∞·ªùi d√πng Facebook'.", event.threadID);
            }
            else {
                api.sendMessage("üîé Nh√≥m b·∫°n hi·ªán c√≥ " + arr.length + " 'Ng∆∞·ªùi d√πng Facebook'.\n Th·∫£ c·∫£m x√∫c üëç v√†o tin nh·∫Øn n√†y ƒë·ªÉ x√≥a list mem die", event.threadID, (err, info) => {
                    if (err) return console.error(err);
                    global.client.handleReaction.push({
                        name: module.exports.config.name,
                        author: senderID,
                        messageID: info.messageID,
                        threadID: threadID,
                        type: 'checkDie',
                        arr
                    });
                })
            }
        } else if (args[0] == 'tag') {
            const userss = threadData.day.filter(user => user.count === 0).map(user => user.id);

            if (userss.length === 0) {
                return api.sendMessage("Nh√≥m c·ªßa b·∫°n t∆∞∆°ng t√°c t·ªët!", threadID, messageID);
            } else {
                const mentions = userss.map(id => ({ id, tag: id }));

                const message = {
                    body: `üó£Ô∏èüî• Anh ·ªü v√πng qu√™ khu ngh√®o kh√≥ ƒë√≥ C√≥ trƒÉm ƒëi·ªÅu kh√≥ Mu·ªën l√™n th√†nh ph·ªë n√™n ph·∫£i c·ªë Sao cho b·ª•ng anh lu√¥n no Th·∫ø r·ªìi g·∫∑p em Nh·ªØng v·ª•n v·ª° ƒë√£ l·ª° ƒë√™m l·∫°i nh·ªõ N·∫±m m∆° g·ªçi t√™n em\n L√™n t∆∞∆°ng t√°c ƒëi ${userss} con gi·ªùi!!`,
                    mentions: mentions
                };

                api.sendMessage(message, threadID);
                return;
            }
        } else if (args[0] === 'noti') {
            const notiDatas = JSON.parse(fs.readFileSync(fileNoti));
            let threadIndex = notiDatas.findIndex(e => e.threadID === threadID);
            let thread = notiDatas[threadIndex];
            const timePattern = /^\d{2}:\d{2}:\d{2}$/;

            if (!args[1]) {
                if (thread) {
                    api.sendMessage(`üìã Tr·∫°ng th√°i c·ªßa nh√≥m:\n‚è∞ Th·ªùi gian: ${thread.time}\nMode1: ${thread.mode1}\nMode2: ${thread.mode2}`, threadID);
                } else {
                    api.sendMessage("‚ùé Ch∆∞a c√≥ th√¥ng tin th√¥ng b√°o cho nh√≥m n√†y.\n‚ö†Ô∏è D√πng check noti (nh·∫≠p theo ƒë·ªãnh d·∫°ng HH:MM:SS) v√≠ d·ª•: check noti 00:00:00 ƒë·ªÉ c√†i ƒë·∫∑t time!!", threadID);
                }
                return;
            }

            if (args[1] === 'on') {
                if (thread) {
                    thread.mode1 = true;
                    thread.mode2 = true;
                } else {
                    return api.sendMessage("Ch∆∞a set time", threadID);
                }
                api.sendMessage("‚úÖ ƒê√£ c√†i ƒë·∫∑t l·∫°i time g·ª≠i noti", threadID);
            } else if (args[1] === 'off') {
                if (thread) {
                    thread.mode1 = false;
                    thread.mode2 = false;
                } else {
                    thread = { threadID: threadID, time: '00:00:00', mode1: false, mode2: false };
                    notiDatas.push(thread);
                }
                api.sendMessage("‚úÖ ƒê√£ t·∫Øt ch·∫ø ƒë·ªô noti", threadID);
            } else if (args[1] === 'clear') {
                if (threadIndex !== -1) {
                    notiDatas.splice(threadIndex, 1);
                    fs.writeFileSync(fileNoti, JSON.stringify(notiDatas, null, 4), 'utf-8');
                    api.sendMessage("‚úÖ ƒê√£ x√≥a th√¥ng tin th√¥ng b√°o c·ªßa nh√≥m th√†nh c√¥ng!", threadID);
                } else {
                    api.sendMessage("Kh√¥ng c√≥ th√¥ng tin th√¥ng b√°o c·ªßa nh√≥m ƒë·ªÉ x√≥a.", threadID);
                }
            } else if (timePattern.test(args[1])) {
                if (thread) {
                    thread.time = args[1];
                    thread.mode1 = thread.mode2;
                } else {
                    thread = { threadID: threadID, time: args[1], mode1: true, mode2: true };
                    notiDatas.push(thread);
                }
                api.sendMessage("‚úÖ ƒê√£ ƒë·∫∑t l·∫°i th·ªùi gian th√¥ng b√°o th√†nh c√¥ng cho nh√≥m!", threadID);
            } else {
                api.sendMessage("Th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng HH:MM:SS ho·∫∑c s·ª≠ d·ª•ng 'on'/'off'.", threadID);
                return;
            }

            fs.writeFileSync(fileNoti, JSON.stringify(notiDatas, null, 4), 'utf-8');
        } else if (args[0] == 'help') {
            api.sendMessage(`[CHECK HELP]
1. check day/week/all: Xem t·∫•t c·∫£ t∆∞∆°ng t√°c trong ng√†y/tu·∫ßn/t·ªïng.
2. check name: Xem t·∫•t c·∫£ th√†nh vi√™n ch∆∞a ƒë·∫∑t bi·ªát danh.
3. check l·ªçc + s·ªë tin nh·∫Øn: L·ªçc nh·ªØng th√†nh vi√™n c√≥ s·ªë tin nh·∫Øn √≠t h∆°n s·ªë ƒë√£ ch·ªâ ƒë·ªãnh.
4. check die: Ki·ªÉm tra nh·ªØng t√†i kho·∫£n Facebook ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.
5. check tag: Tag t·∫•t c·∫£ th√†nh vi√™n √≠t t∆∞∆°ng t√°c trong ng√†y.
6. check noti + gi·ªù:ph√∫t:gi√¢y/on/off/clear: ƒê·∫∑t th·ªùi gian g·ª≠i th√¥ng b√°o t∆∞∆°ng t√°c cu·ªëi ng√†y/b·∫≠t/t·∫Øt/x√≥a ch·∫ø ƒë·ªô t·ª± ƒë·ªông g·ª≠i th√¥ng b√°o.
7. check reset: ƒê·∫∑t l·∫°i d·ªØ li·ªáu t∆∞∆°ng t√°c c·ªßa nh√≥m v·ªÅ 0.`, threadID, event.messageID);
        } else {
    const uid = messageReply?.senderID || (mentions && Object.keys(mentions).length > 0 ? Object.keys(mentions)[0] : senderID);

    const sortedData = quickSort(threadData.total, 'count');
    const sortedData1 = quickSort(threadData.week, 'count');
    const sortedData2 = quickSort(threadData.day, 'count');

    const userIndex = sortedData.findIndex(user => user.id == uid);
    const userIndex1 = sortedData1.findIndex(user => user.id == uid);
    const userIndex2 = sortedData2.findIndex(user => user.id == uid);

    if (userIndex !== -1) {
		        const UID = event.messageReply ? event.messageReply.senderID : Object.keys(mentions)[0] ? Object.keys(mentions)[0] : senderID;

        const userCount = sortedData[userIndex].count;
        const userCount1 = sortedData1[userIndex1]?.count || 0; // S·ªë tin nh·∫Øn trong tu·∫ßn
        const userCount2 = sortedData2[userIndex2]?.count || 0; // S·ªë tin nh·∫Øn trong ng√†y

        const rank = userIndex + 1; // X·∫øp h·∫°ng t·ªïng
        const rank1 = userIndex1 + 1; // X·∫øp h·∫°ng tu·∫ßn
        const rank2 = userIndex2 + 1; // X·∫øp h·∫°ng ng√†y
		
        const userTotalDay = threadData.day.find(e => e.id == UID) ? threadData.day.find(e => e.id == UID).count : 0;
        const userTotalWeek = threadData.week.find(e => e.id == UID) ? threadData.week.find(e => e.id == UID).count : 0;
        const userTotal = threadData.total.find(e => e.id == UID) ? threadData.total.find(e => e.id == UID).count : 0;		

        const ttgn = sortedData[userIndex].ttgn;
        const joinTime = sortedData[userIndex].joinTime;

        const userName = (await Users.getData(uid)).name;

        const threadInfo = (await Threads.getData(event.threadID)).threadInfo;
        let permission;

        if (global.config.NDH.includes(uid)) {
            permission = `Ng∆∞·ªùi ƒëi·ªÅu h√†nh`;
        } else if (global.config.ADMINBOT.includes(uid)) {
            permission = `Admin bot`;
        } else if (threadInfo.adminIDs.some(i => i.id == uid)) {
            permission = `Qu·∫£n Tr·ªã Vi√™n`;
        } else {
            permission = `Th√†nh vi√™n`;
        }

        const totalCount = sortedData.reduce((sum, user) => sum + user.count, 0);
        const tl = Math.ceil((userCount / totalCount) * 100);

        const joins = join_time(joinTime);

        const message = `‚ú® T∆∞∆°ng t√°c c·ªßa ${userName}:\n` +
            `ü™™ Ch·ª©c V·ª•: ${permission}\n` +
            `üí¨ T·ªïng s·ªë tin nh·∫Øn: ${userTotal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}\n` +
            `üìÖ S·ªë tin nh·∫Øn trong tu·∫ßn: ${userTotalWeek.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}\n` +
            `üìÜ S·ªë tin nh·∫Øn trong ng√†y: ${userTotalDay.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}\n` +
            `‚è∞ L·∫ßn cu·ªëi nh·∫Øn tin: ${ttgn}\n` +
            `üìä T·ªâ l·ªá t∆∞∆°ng t√°c: ${tl}%\n` +
            `üèÜ X·∫øp h·∫°ng: ${rank}/${event.participantIDs.length} (t·ªïng)\n` +
            `üèÖ X·∫øp h·∫°ng: ${rank1}/${event.participantIDs.length} (tu·∫ßn)\n` +
            `ü•á X·∫øp h·∫°ng: ${rank2}/${event.participantIDs.length} (ng√†y)\n` +
            `üìù Ng√†y v√†o nh√≥m: ${joinTime}\n` +
            `üóìÔ∏è ƒê√£ tham gia ƒë∆∞·ª£c: ${joins}`;

        api.sendMessage(message, threadID, event.messageID);
    } else {
        api.sendMessage(`User ID: ${uid} kh√¥ng t√¨m th·∫•y.`, threadID);
            }
        }
    }
};

module.exports.handleReply = async ({ api, event, handleReply, Users, Threads }) => {
    const { body, threadID, messageID, senderID } = event;
    //console.log(event)

    const dataThread = (await Threads.getData(event.threadID)).threadInfo;
    if (!dataThread.adminIDs.some(item => item.id === senderID)) return api.sendMessage('‚ö†Ô∏è Quy·ªÅn h·∫°n????', threadID, messageID);

    const args = body.trim().split(' ');

    const keyword = args[0].trim().toLowerCase();
    const values = args.slice(1).map(value => parseInt(value, 10));

    const filePath = p.join(cacheDir, `${threadID}.json`);
    const threadData = JSON.parse(fs.readFileSync(filePath));


    if (keyword === 'l·ªçc') {

        const botID = api.getCurrentUserID();
        const botIsAdmin = dataThread.adminIDs.some(admin => admin.id === botID);

        if (!botIsAdmin) return api.sendMessage("‚ö†Ô∏è Bot c·∫ßn quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.", threadID, messageID);



        const sl = parseInt(values[0], 10);

        if (isNaN(sl)) return api.sendMessage("‚ö†Ô∏è Thi·∫øu s·ªë", threadID, messageID);


        const userss = threadData.total.filter(user => user.count <= sl).map(user => user.id);

        if (userss.length === 0) return api.sendMessage("‚ùé Kh√¥ng c√≥ th√†nh vi√™n n√†o c√≥ s·ªë tin nh·∫Øn nh·ªè h∆°n ho·∫∑c b·∫±ng " + sl, threadID, messageID);
        const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
        for (const id of userss) {
            if (id == botID) continue;
            await api.removeUserFromGroup(id, threadID);
            await delay(500);
        }

        api.sendMessage(`ƒê√£ l·ªçc th√†nh c√¥ng ${userss.length}`, threadID);

    } else if (keyword === 'kick') {
        const botID = api.getCurrentUserID();
        const botIsAdmin = dataThread.adminIDs.some(admin => admin.id === botID);

        if (!botIsAdmin) return api.sendMessage("‚ö†Ô∏è Bot c·∫ßn quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.", threadID, messageID);


        if (values.length === 0) return api.sendMessage("‚ö†Ô∏è Thi·∫øu s·ªë", threadID, messageID);

        if (!values.every(value => /^\d+$/.test(value))) return api.sendMessage(`Nh·∫≠p s·ªë?`, threadID, messageID);

        const listDel = values.map(value => parseInt(value, 10));

        const Th·∫±ng_B·ªã_kick_list = handleReply.sortedData;

        let Th·∫±ng_Ngu_B·ªã_Kick = [];
        const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
        for (const [index, user] of Th·∫±ng_B·ªã_kick_list.entries()) {
            if (listDel.includes(index + 1)) {
                try {
                    const userInfo = await Users.getData(user.id);
                    const userName = userInfo.name;
                    if (user.id == botID) continue;
                    await api.removeUserFromGroup(user.id, threadID);
                    Th·∫±ng_Ngu_B·ªã_Kick.push(`${userName}`);
                    await delay(500)
                } catch (error) {
                    //console.error(`L·ªói ${user.id}: ${error.message}`);
                }
            }
        }
        if (Th·∫±ng_Ngu_B·ªã_Kick.length > 0) {
            const message = `ƒê√£ kick ${Th·∫±ng_Ngu_B·ªã_Kick.join(', ')}`;
            api.sendMessage(message, threadID);
        }
    } else if (keyword === 'reset') {
        resets = true;
        try {
            const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            const participantIDs = event.participantIDs;

            const resetCount = (items) => {
                return items.filter(item => participantIDs.includes(item.id)).map(item => {
                    item.count = 0;
                    return item;
                });
            };

            data.total = resetCount(data.total);
            data.week = resetCount(data.week);
            data.day = resetCount(data.day);

            fs.writeFileSync(filePath, JSON.stringify(data, null, 2));

            api.sendMessage(`‚úÖ ƒê√£ ƒë·∫∑t l·∫°i to√†n b·ªô d·ªØ li·ªáu ƒë·∫øm t∆∞∆°ng t√°c c·ªßa nh√≥m`, threadID);
        } catch (error) {
            api.sendMessage(`‚ùé L·ªói: Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i d·ªØ li·ªáu. ${error.message}`, threadID);
        }
        resets = false;
    } else if (keyword == 'tag') {
        const userss = threadData.day.filter(user => user.count === 0).map(user => user.id);

        if (userss.length === 0) {
            return api.sendMessage("üéâ Ch√∫c m·ª´ng\nüèÜ Nh√≥m c·ªßa b·∫°n t∆∞∆°ng t√°c t·ªët!", threadID, messageID);
        } else {
            const mentions = userss.map(id => ({ id, tag: id }));

            const message = {
                body: `üó£Ô∏èüî• Anh ·ªü v√πng qu√™ khu ngh√®o kh√≥ ƒë√≥ C√≥ trƒÉm ƒëi·ªÅu kh√≥ Mu·ªën l√™n th√†nh ph·ªë n√™n ph·∫£i c·ªë Sao cho b·ª•ng anh lu√¥n no Th·∫ø r·ªìi g·∫∑p em Nh·ªØng v·ª•n v·ª° ƒë√£ l·ª° ƒë√™m l·∫°i nh·ªõ N·∫±m m∆° g·ªçi t√™n em\n L√™n t∆∞∆°ng t√°c ƒëi ${userss} con gi·ªùi!!`,
                mentions: mentions
            };

            api.sendMessage(message, threadID);
            return;
        }
    }
};

module.exports.handleReaction = async function ({ api, event, Threads, handleReaction, Users }) {
    const { body, threadID, messageID, userID } = event;

    console.log(event)

    const dataThread = (await Threads.getData(event.threadID)).threadInfo;
    if (!dataThread.adminIDs.some(item => item.id === userID)) return api.sendMessage('‚ö†Ô∏è Quy·ªÅn h·∫°n????', threadID);
    if (handleReaction.type == "checkDie") {
        const botID = api.getCurrentUserID();
        const botIsAdmin = dataThread.adminIDs.some(admin => admin.id === botID);

        if (!botIsAdmin) return api.sendMessage("‚ö†Ô∏è Bot c·∫ßn quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.", threadID);
        api.sendMessage("üîÑ B·∫Øt ƒë·∫ßu l·ªçc..", event.threadID, async function () {
            for (const e of handleReaction.arr) {
                try {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    await api.removeUserFromGroup(parseInt(e), event.threadID);
                    success++;
                }
                catch {
                    fail++;
                }
            }

            api.sendMessage("‚úÖ ƒê√£ l·ªçc th√†nh c√¥ng " + success + " ng∆∞·ªùi.", event.threadID, function () {
                if (fail != 0) return api.sendMessage("‚ùé L·ªçc th·∫•t b·∫°i " + fail + " ng∆∞·ªùi.", event.threadID);
            });
        })
    }
}